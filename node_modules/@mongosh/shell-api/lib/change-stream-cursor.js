"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("./decorators");
const result_1 = require("./result");
const enums_1 = require("./enums");
const errors_1 = require("@mongosh/errors");
const helpers_1 = require("./helpers");
const abstract_cursor_1 = require("./abstract-cursor");
let ChangeStreamCursor = (() => {
    let _classDecorators = [decorators_1.shellApiClassDefault];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    let _classSuper = abstract_cursor_1.BaseCursor;
    let _instanceExtraInitializers = [];
    let _hasNext_decorators;
    let _tryNext_decorators;
    let _next_decorators;
    var ChangeStreamCursor = _classThis = class extends _classSuper {
        constructor(cursor, on, mongo) {
            super(mongo, cursor);
            this._currentIterationResult = (__runInitializers(this, _instanceExtraInitializers), null);
            this._on = on;
        }
        async _it() {
            if (this._cursor.closed) {
                throw new errors_1.MongoshRuntimeError('ChangeStreamCursor is closed');
            }
            const result = (this._currentIterationResult = new result_1.CursorIterationResult());
            return (0, helpers_1.iterate)(result, this, await this._mongo._displayBatchSize());
        }
        [enums_1.asPrintable]() {
            return Promise.resolve(`ChangeStreamCursor on ${this._on}`);
        }
        async hasNext() {
            if (!this._blockingWarningDisabled) {
                await this._instanceState.printWarning('If there are no documents in the batch, hasNext will block. Use tryNext if you want to check if there ' +
                    'are any documents without waiting, or cursor.disableBlockWarnings() if you want to disable this warning.');
            }
            return super.hasNext();
        }
        async tryNext() {
            if (this._cursor.closed) {
                throw new errors_1.MongoshRuntimeError('Cannot call tryNext on closed cursor');
            }
            return super.tryNext();
        }
        isExhausted() {
            throw new errors_1.MongoshInvalidInputError('isExhausted is not implemented for ChangeStreams because after closing a cursor, the remaining documents in the batch are no longer accessible. If you want to see if the cursor is closed use isClosed. If you want to see if there are documents left in the batch, use tryNext.');
        }
        async next() {
            if (!this._blockingWarningDisabled) {
                await this._instanceState.printWarning('If there are no documents in the batch, next will block. Use tryNext if you want to check if there are ' +
                    'any documents without waiting, or cursor.disableBlockWarnings() if you want to disable this warning.');
            }
            return (await super.next());
        }
        getResumeToken() {
            return this._cursor.resumeToken;
        }
        toArray() {
            throw new errors_1.MongoshUnimplementedError('Cannot call toArray on a change stream cursor');
        }
        batchSize() {
            throw new errors_1.MongoshUnimplementedError('Cannot call batchSize on a change stream cursor');
        }
        objsLeftInBatch() {
            throw new errors_1.MongoshUnimplementedError('Cannot call objsLeftInBatch on a change stream cursor');
        }
        maxTimeMS() {
            throw new errors_1.MongoshUnimplementedError('Cannot call maxTimeMS on a change stream cursor');
        }
    };
    __setFunctionName(_classThis, "ChangeStreamCursor");
    (() => {
        var _a;
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create((_a = _classSuper[Symbol.metadata]) !== null && _a !== void 0 ? _a : null) : void 0;
        _hasNext_decorators = [decorators_1.returnsPromise, decorators_1.deprecated];
        _tryNext_decorators = [decorators_1.returnsPromise];
        _next_decorators = [decorators_1.returnsPromise];
        __esDecorate(_classThis, null, _hasNext_decorators, { kind: "method", name: "hasNext", static: false, private: false, access: { has: obj => "hasNext" in obj, get: obj => obj.hasNext }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _tryNext_decorators, { kind: "method", name: "tryNext", static: false, private: false, access: { has: obj => "tryNext" in obj, get: obj => obj.tryNext }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_classThis, null, _next_decorators, { kind: "method", name: "next", static: false, private: false, access: { has: obj => "next" in obj, get: obj => obj.next }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        ChangeStreamCursor = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return ChangeStreamCursor = _classThis;
})();
exports.default = ChangeStreamCursor;
//# sourceMappingURL=change-stream-cursor.js.map